@page "/login/admin"

@rendermode InteractiveServer

@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Bless.Proxy

@inject HttpClient Http
@inject IJSRuntime JS
@inject BookingHub SignalR
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container" style="margin-top: 5rem;">

    <button @onclick="SolicitarPermiso">Activar Notificaciones</button>

    <div class="text-center mb-5">
        <h2 class="text-primary">
            <i class="bi bi-bell-fill me-2"></i> Notificaciones
        </h2>
        <ul class="list-group list-group-flush mt-3">
            @foreach (var msg in mensajes)
            {
                <li class="list-group-item bg-light border rounded shadow-sm mb-2">
                    <i class="bi bi-chat-left-text me-2 text-secondary"></i>@msg
                </li>
            }
        </ul>
    </div>

    <div class="d-flex justify-content-center my-5">
        <div class="card shadow-lg p-4 text-center" style="max-width: 500px; width: 100%;">
            <CascadingAuthenticationState>
                <AuthorizeView>
                    <Authorized>
                        <h4 class="text-success mb-3">
                            <i class="bi bi-check-circle-fill me-2"></i>Bienvenido, estás autenticado
                        </h4>
                        <button class="btn btn-outline-danger px-4" @onclick="Logout" @onclick:preventDefault>
                            <i class="bi bi-box-arrow-right me-1"></i> Salir
                        </button>
                    </Authorized>
                    <NotAuthorized>
                        <p class="text-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>No estás autorizado. Redirigiendo...
                        </p>
                    </NotAuthorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
        </div>
    </div>
</div>

@code {

    private List<string> mensajes = new();
    private int contador = 1;

    private async Task Logout()
    {
        Navigation.NavigateTo("/logout", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        SignalR.OnNotificacionRecibida += async (msg) =>
         {
             var mensajeConNumero = $"{msg} {contador++}";
             mensajes.Add(mensajeConNumero);
             await EnviarNotificacion();
             await InvokeAsync(StateHasChanged);
         };

        await SignalR.ConectarAsync();
    }

    private async Task SolicitarPermiso()
    {
        await JS.InvokeVoidAsync("notifications.requestPermissionAndSubscribe");
    }

    private async Task EnviarNotificacion()
    {
        // Llama al backend para enviar la notificación a todos los dispositivos suscritos
        await Http.PostAsync("https://localhost:7289/api/push/send", null);
    }
}