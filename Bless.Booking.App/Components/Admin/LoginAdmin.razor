@page "/login"

@using Bless.Models
@using Bless.Proxy
@inject AuthService AuthService
@inject NavigationManager Navigation

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="FormLogin" class="w-100" style="max-width: 400px; margin: auto;">
    <div class="login-container d-flex flex-column justify-content-center align-items-center min-vh-100 bg-white text-black">
        <h2 class="fw-bold mb-4">Bless Barber Shop</h2>

        <div class="form-group w-100" style="max-width: 400px;">
            <label for="email" class="form-label">Correo</label>
            <InputText @bind-Value="loginModel.Username" placeholder="Usuario" class="form-control" />
        </div>

        <div class="form-group w-100 mt-3" style="max-width: 400px;">
            <label for="password" class="form-label">Contraseña</label>
            <InputText @bind-Value="loginModel.Password" placeholder="Contraseña" type="password" class="form-control" />
        </div>

        <button type="submit" class="btn btn-dark mt-4 px-4 py-2 rounded w-100" style="max-width: 400px;">
            Iniciar sesión
        </button>

    </div>
</EditForm>

<p style="color:red">@errorMessage</p>

@code {
    private User loginModel = new();
    private string errorMessage;
    private string returnUrl = "/";

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("ReturnUrl", out var returnUrlParam))
        {
            returnUrl = returnUrlParam;
        }
    }

    private async Task HandleLogin()
    {
        loginModel.Username = "admin";
        loginModel.Password = "1234";
        var success = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
        if (success)
        {
            Navigation.NavigateTo("/login/admin", forceLoad: true);
        }
        else
        {
            errorMessage = "Credenciales incorrectas";
        }
    }

}
